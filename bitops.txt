Caveat: WORK IN PROGRESS

# Operators

AND:    1 iff(*) all inputs are 1
        0 otherwise

OR:     1 if at least one input is 1
        0 only if all inputs are 0

XOR:    1 if inputs are not the same

NOT:    1 if input is 0
        0 if input is one

*: iff = if and only if


# Bits & Bytes

8 Bits make 1 Byte

Bits are numbered from left to right          87654321

The right-most bit is called least significant bit or LSB.
The left-most bit is called most significant bit or MSB.

This is analogous to how the decimal system works, the more
important digits are further left.


# C-style Operators

               Bitwise   Logical
AND            &         &&
OR             |         ||
NOT            ~         !
XOR            ^         n/a


Caveat: To fiddle with bits, use only bitwise operators!
        Your compiler will allow using logical operators,
        but the result will not be what you want!



# Shifting

Shift all bits to the left or right en-bloc.

Bits that are "shifted out" are lost.
Replacement bits "shifted in" are always set to 0.

Fun-fact: Shifting left by n places is equivalent to multiplying by 2^n.
          Likewise, shifting right is equivalent to dividing by 2^n.

               Operator
SHIFT LEFT     <<
SHIFT RIGHT    >>

11001010 >> 2 => 00110010
11001010 << 2 => 00101000


# Masking

If you're only interested in a subset of bits, you can "select" them
using a mask.
A mask is simply a byte with a number of bits set to 1.
You can think of a 1 bit as a cut-out in a piece of paper.
Everything that is 1 you can see, everything else (0) you cannot.


# Useful Operations

- Create mask with n-th bit set
  (1<<n)

  (1<<3) => 00001000

- Create mask with n-th and m-th bit set
  (1<<n)|(a<<m)

  (1<<3)|(1<<7) => 10001000

- Create mask with everything but n-th bit set
  ~(1<<n)

  ~(1<<3) => 11110111

- Set high-bits of mask m in v
  v | m

  11001100 | 01100110 => 11101110

- Clear high-bits of mask m in v
  v & ~m

  11001100 & ~01100110 => 10001000
  11001100 &  10011001 => 10001000

- Toggle the n-th bit
  v ^ (1<<n)

  11001100 ^ (1<<3) => 11000100
  11001100 ^ (1<<4) => 11011100

- Directly apply operations to a variable
  Use &=, |=, ^=, <<=, and >>=

  a = a | b => a |= b
  a = a & b => a &= b
  a = a ^ b => a ^= b
  a = a << b => a <<= b
  a = a >> b => a >>= b
