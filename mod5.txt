Module 5

SPI - HW serial data

in which a loop will move into hardware!

[gif: larson scanner mit 16 LEDs]



Stuff you will need

[tinymega] [usb-kabel] [notebook]
[breadboard] {breadboard-strippen]
[leds] [widerstände] [shiftis]



Bit-banging

Common term in embedded programming
Operating bit protocol by toggling pins in software
Con: Not very hardware efficient
Pro: Any protocol can be implemented



What is SPI?

"Serial Peripheral Interface"
Basically a daisy chain of shift registers
"Master" drives the chain, supplies the clock
"Slaves" only react
Last slave output may go back into the µC for return data
No defined protocol for actual data
	Device datasheets will tell



SPI signals

MOSI - Master Out / Slave In
MISO - Master In / Slave Out
SCK  - Serial Clock
SS   - Slave Select (optional)



SPI applications

Control any number of SPI slaves
Generally, shift out serial data with clock
We can use this for our SIPO shift regs!



SPI capabilities in the ATmega

Both master and slave mode supported
LSB-first and MSB-first modes
Four kinds of CLK vs. data relationships (17.2)
	Low-active vs. high-active clock
	Sample on leading or trailing edge of clock
Interrupt on byte completion



SPI pins on the ATmega

SPI pins mapped to fixed port pins
	Other MCUs are more flexible
Trap: Be careful what you use the SS pin for!
	Could abort transmission in Master mode (17.1.2)
Pin data controlled by HW
FW responsible for setting up pin direction!



Setting up the SPI controller

SPCR - SPI Control Reg (17.1.3)
	Most bits are obvious, but:
	Data order?
	Clock polarity?
	Clock phase?
	
SPSR - SPI Status Reg (17.1.4)
	Read before first writing SPDR
	Clears any pending interrupts

	
	
SPI transmission
	
SPDR - SPI Data Reg (17.1.5)
	Write data here
	Don't write again until byte finished

Handle next byte(s) in SPI interrupt
	Use volatile data pointer
	Write next byte to SPDR
	When transfer finished
		Disable SPI to be safe
		Strobe LATCH signal


		
Debugging technique

Use unused pin as debug signal
Set / reset on given events
Watch on oscilloscope to:
	Measure signal timing
	Find out time taken by code
	Trigger on sporadic events



Now go forth and code!

Task: Transform SIPO code from bit-banging to SPI
      <code>cp module4.c module5.c</code>

Info:
	Make sure you use the correct pins
	Remember to set up pin directions
	Start SPI xfer on timer IRQ
	Keep SPI running through SPI IRQ
